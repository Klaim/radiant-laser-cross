= Radiant Laser Cross TODO List =
=================================

- TODO ------------------------------------------------------------

1. Refactoring
	1.2. No raw pointer in containers and owner members.
	1.3. Move gameplay constants in separate header/cpp and namespace.
	1.4. Add comments. At least on classes and function members.
	1.5. State management refactoring.
		1.5.1. State managers should be able to be used as state.
		1.5.2. See if using boost::msm wouldn't be easy?
	1.6. Refactor GameEntityGroup.
		1.6.1. Avoid raw pointers in the interface.
		1.6.2. Add a way to apply a (lambda) function to all children.
		1.6.3. Updating an entity should update the children too (maybe with option to not update them)
		1.6.4. Child search? In depth? Necessary? - seems that yes, see scripting 4.3.3
		1.6.5. Children should have only one parent ever, and should know about it.
			1.6.5.1. add() and remove() should take a smart pointer instead because the group have to become an owner.
	1.7. Move the escape key to somewhere upper than GameScene to make it valid in all states.
	1.8. Game Scene.
		1.8.1. Add plan-ordered sorting of entities (for rendering).
	1.9. Refactor GameEntity to make it more general (see GameEntity::core_shape())
	1.10. Replace for loop in containers by std::for_each( lamda ) where useful.
	1.11. Make the game space/size independant from the resolution
		1.11.1. Conversion system to keep the game graphic scale independant from screen resolution.
		1.11.2. Limit minimal screen resolution.
		1.11.3. Apply conversion to all game coordinates and game shapes scale to screen.
	1.12. Movement should be at constant speed - diagonals too.
	1.13. Ship => GunShip ? Gunship : public Ship ? Or rename Ship?
	1.14. Bullet colors should be set by the gun instance, not the bullet type.
		1.14.1. Bullet shape, etc. should be set by the bullet type...
	1.15. Bullet manager initialization should be with a constant taken from the gameplay (hard) configuration.
	1.16. Look for generation of graphics in the game loop and replace them by using predefined shapes/boxes/etc.
	1.17. PlayerShip Refactoring
		1.17.1. Move constants in gameplay config.
		1.17.2. Rename GunSetup to GunDirection or something.
		1.17.3. Make test bullet types and guns real (hard?) types of guns and bullets.
		1.17.4. We have only one type of gun...right?
		1.17.5. Factorize input updates.
		1.17.6. Ship and Gun rendering have to be more efficient - what a mess!!!
		1.17.7. What does mean the FUCK comment?
		1.17.8. Review algorithms - move and gun rotation ones looks strange...
			1.17.9. BUG : Firing while rotating on the EAST will make it 
	1.18. Gun Refactoring
		1.18.1. Heat concept mmight have another name, like reload time or something.
		1.18.2. Does Guns have to be game entities? Can't they by abstract things? Not sure... Or their cannons are abstracts?
		1.18.3. GunSlot shouldn't be jsut a (smart) pointer, it should be a class with some is_gunned() function or something like that.
		1.18.4. WTF is m_cannon ??? m_current_cannon seems to be used instead.
	1.19. Gameplay?
		1.19.1. 8 directions fire? Allow diagonal orientations?
		
	
2. Collision system
	2.1. Find a good 2D collision-only library
	2.2. Setup collideable objects for game entities that need it.
	2.3. Setup a collision callback system (or something similar).
	2.4. Setup collision rules!
		2.4.1. Explosions?
			2.4.1.1. Animated circles?
			2.4.1.2. Particles?
		2.4.2. Color animation system?

3. Ennemy system
	3.1. Define Color codes
		3.1.1. 	Blue = Background/Walls 
				White = Generic ennemy : can take any bullet
				Hot colors = Ennemies/bullets : everything that can take a color
				Green = Life & Bonus
	3.2. Life system - more for bosses and hard ennemies.
	
4. Scripting system
	4.1. Integrate ChaiScript - setup running engine and global organization
	4.2. Make Guns scriptable
		4.2.1. Bullet type
		4.2.2. Gun type
		4.2.3. 
	4.3. Make Ship scriptable
		4.3.1. Types : life, guns types, initial guns, default behaviour, etc.
		4.3.2. Custom Behaviours : move, fire, transform
		4.3.3. Can access his gun and children entities.
	4.4. Levels
		4.4.1. Spawning : time - ship instance
		4.4.2. Level informations - displayed at level start
		4.4.3. Load and run a level
		4.4.4. Level listing.
		4.4.5. Background roll control.
		4.4.6. Unique level version identification system - how to do this? 
	
5. Audio system
	5.1. Setup audio system of SFML
	5.2. Find/create sounds
	5.3. Find/create music
	
6. Cross platform
	6.1. Replace VS projects by CMake
	6.2. Build and run on Ubuntu (gcc/codeblocks)

7. Utility & Debug
	7.1. Add a (debug) pause command.
	7.2. When paused, add a "1 step" command.
	
8. Move on the public repo.

9. Background rolling
	9.1. Automatic background shapes in depth random generation.
	9.2. Particle shapes, speed, spawn position probabilities...

10. Game Menu
	10.1. Start Menu
		10.1.1. Config?
		10.1.2. Run a game session (fixed lifes count?).
		
11. High score system
	11.1. Local High Score
	11.2. Online World High Score
	11.3. High score have to be Level dependant.
	
- DONE ------------------------------------------------------------

1. Refactoring
	1.1. First pass for planning

	